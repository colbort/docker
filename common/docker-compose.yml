version: "3.5"
# 网络配置
# networks:
#   common:
#     driver: ${NETWORKS_DRIVER}

networks:
  common:
    external: true

# 服务容器配置
services:
  etcd:
    # 自定义容器名称
    build:
      context: ./etcd # 指定构建使用的 Dockerfile 文件
    container_name: common_etcd
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:
      # 设置端口映射
      - "${ETCD_PORT}:2379"
    networks:
      - common
  #    restart: always

  mysql:
    build:
      context: ./mysql
    container_name: common-mysql
    environment:
      - TZ=${TZ}
      #      - MYSQL_USER=${MYSQL_USERNAME} # 设置 Mysql 用户名称
      #      - MYSQL_PASSWORD=${MYSQL_PASSWORD} # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} # 设置 Mysql root 用户密码
      - MYSQL_SQL_MODE="NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES"
    privileged: true
    command: --sql-mode="NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES" # 禁用 ONLY_FULL_GROUP_BY
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
    ports:
      - "${MYSQL_PORT}:3306" # 设置容器3306端口映射指定宿主机端口
    networks:
      - common
  #    restart: always

  redis:
    build:
      context: ./redis
    container_name: common-redis
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis:/data # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_PORT}:6379" # 设置容器6379端口映射指定宿主机端口
    # command: redis-server --requirepass ${REDIS_PASSWD}
    networks:
      - common
  #    restart: always

  nacos-server:
    build:
      context: ./nacos-server
    container_name: common-nacos
    platform: linux/arm64
    environment:
      - TZ=${TZ}
      - MODE=standalone
      - SPRING_DATASOURCE_PLATFORM=mysql
      - MYSQL_SERVICE_HOST=common-mysql
      - MYSQL_SERVICE_DB_NAME=nacos_devtest
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_USER=root
      - MYSQL_SERVICE_PASSWORD=123456
      - MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
      - NACOS_AUTH_IDENTITY_KEY=nacos
      - NACOS_AUTH_IDENTITY_VALUE=123456
      - NACOS_AUTH_TOKEN=SecretKey012345678901234567890123456789012345678901234567890123456789
      - NACOS_AUTH_ENABLE=false
    ports:
      - "8848:8848"
      - "9848:9848"
    networks:
      - common

  nats:
    build:
      context: ./nats
    container_name: common-nats
    volumes:
      - ${DATA_PATH_HOST}/nats/jetstream:/tmp/nats/jetstream
    ports:
      - "4222:4222"
    networks:
      - common
    # environment:
    #   - NATS_CONFIG=/nats_config/nats.conf

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
    container_name: common_elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.seed_hosts=elasticsearch
      - cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      # 启用 Elasticsearch 的基本许可证（无需证书）
      - xpack.license.self_generated.type=basic
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - common

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.1
    container_name: common_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - common

  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.1
    container_name: common_logstash
    volumes:
      - ./logstash/config:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
      - "5000:5000"
    environment:
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    depends_on:
      - elasticsearch
    networks:
      - common

  postgres:
    build:
      context: ./postgres
    container_name: common_postgres
    environment:
      POSTGRES_PASSWORD: 123456
      POSTGRES_USER: root
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: ${TZ}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command:
      [
        "postgres",
        "-c",
        "shared_preload_libraries=pg_stat_statements,uuid-ossp",
      ]
    networks:
      - common

  nginx:
    image: nginx
    container_name: common_nginx
    ports:
      - "8080:80"
    volumes:
      # - ${DATA_PATH_HOST}/nginx/conf.d:/etc/nginx/conf.d
      - ${DATA_PATH_HOST}/nginx/app:/usr/share/nginx/html/app
      - ${DATA_PATH_HOST}/nginx/log:/var/log/nginx
      - ${DATA_PATH_HOST}/nginx/data:/home/data
    networks:
      - common

  promtail:
    image: grafana/promtail:latest
    container_name: common_promtail
    volumes:
      - ${DATA_PATH_HOST}/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - common

  mongodb:
    image: mongo:latest
    ports:
      - "37017:27017"
    container_name: common_mongo
    command: --wiredTigerCacheSizeGB 1 --auth
    volumes:
      - "${DATA_PATH_HOST}/mongodb/data/db:/data/db"
      - "${DATA_PATH_HOST}/mongodb/data/logs:/data/logs"
      - "${DATA_PATH_HOST}/mongodb/data/conf:/etc/mongo"
      - "./scripts/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro"
    environment:
      - TZ=Asia/Shanghai
      - wiredTigerCacheSizeGB=1
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
      - MONGO_OPENIM_USERNAME=${MONGO_OPENIM_USERNAME} # Non-root username
      - MONGO_OPENIM_PASSWORD=${MONGO_OPENIM_PASSWORD} # Non-root password
    networks:
      - common

  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT}:9000"
      - "9090:9090"
    container_name: common_minio
    volumes:
      - "${DATA_PATH_HOST}/mnt/data:/data"
      - "${DATA_PATH_HOST}/mnt/config:/root/.minio"
    environment:
      MINIO_ROOT_USER: "${MINIO_ACCESS_KEY}"
      MINIO_ROOT_PASSWORD: "${MINIO_SECRET_KEY}"
    command: minio server /data --console-address ':9090'
    networks:
      - common

  influxdb:
    image: influxdb:2.7.1
    container_name: common-influxdb
    ports:
      - "8186:8086"
    volumes:
      - ${DATA_PATH_HOST}/influxdb:/var/lib/influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin1234
      - DOCKER_INFLUXDB_INIT_ORG=openkf
      - DOCKER_INFLUXDB_INIT_BUCKET=openkf
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=admin1234
    networks:
      - common

  activemq:
    image: cskefu/activemq:5.14.3
    container_name: common-activemq
    environment:
      - ACTIVEMQ_ADMIN_LOGIN=admin
      - ACTIVEMQ_ADMIN_PASSWORD=${DB_PASSWD:-123456}
      - ACTIVEMQ_ENABLED_SCHEDULER=true
      - ACTIVEMQ_MIN_MEMORY=1024
      - ACTIVEMQ_MAX_MEMORY=4096
    volumes:
      - ${DATA_PATH_HOST}/activemq/data:/data
      - ${DATA_PATH_HOST}/activemq/logs:/var/log/activemq
    ports:
      - "${ACTIVEMQ_PORT1:-8051}:8161"
      - "${ACTIVEMQ_PORT2:-8052}:61616"
      - "${ACTIVEMQ_PORT3:-8053}:61613"
    networks:
      - common

  tomcat:
    image: tomcat:latest
    container_name: tomcat
    ports:
      - "8080:8080"
    volumes:
      - ${DATA_PATH_HOST}/tomcat/webapps:/usr/local/tomcat/webapps
      - ${DATA_PATH_HOST}/tomcat/logs:/usr/local/tomcat/logs
    #   - ${DATA_PATH_HOST}/tomcat/conf:/usr/local/tomcat/conf
    environment:
      - JAVA_OPTS=-Xmx512M
    networks:
      - common

  zookeeper:
    image: ubuntu/zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      TZ: America/New_York
    # volumes:
    #   - ${DATA_PATH_HOST}/conf/zookeeper:/conf # 将配置文件挂载到容器
    #   - ${DATA_PATH_HOST}/zookeeper:/var/lib/zookeeper # 确保 myid 文件存在
    networks:
      - common

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ 默认端口
      - "15672:15672" # RabbitMQ 管理界面端口
    environment:
      RABBITMQ_DEFAULT_USER: guest # 默认用户名
      RABBITMQ_DEFAULT_PASS: guest # 默认密码
    volumes:
      - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq # 数据持久化
    networks:
      - common

  seata-server:
    image: seataio/seata-server:2.0.0
    container_name: seata-server
    environment:
      - SEATA_IP=192.168.10.126
    #   - SEATA_CONFIG_NAME=file:/root/seata-config/registry.conf
    volumes:
      # - ${DATA_PATH_HOST}/seata/config:/root/seata-config
      - ${DATA_PATH_HOST}/seata/config/application.yml:/seata-server/resources/application.yml
    ports:
      - "8091:8091"
      - "7091:7091"
    networks:
      - common
    depends_on:
      - mysql

  sentinel-dashboard:
    image: bladex/sentinel-dashboard:latest # 官方镜像
    container_name: sentinel-dashboard
    ports:
      - "8858:8858"
    networks:
      - common

volumes:
  esdata:
    driver: local
